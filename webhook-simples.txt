// Função webhook simplificada com senha fixa "123456"
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import Stripe from "https://esm.sh/stripe@12.9.0?target=deno";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.0";

// Configurações
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "*",
  "Access-Control-Allow-Methods": "POST, OPTIONS"
};

// Inicialização
const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Inicialização do Stripe
const stripeSecretKey = Deno.env.get("STRIPE_SECRET_KEY") || "";
const stripe = new Stripe(stripeSecretKey, {
  apiVersion: "2023-10-16",
  httpClient: Stripe.createFetchHttpClient(),
});

// Função para gerar senha - SEMPRE retorna "123456"
function generateRandomPassword() {
  console.log("[INFO] Gerando senha padrão: 123456");
  return "123456";
}

serve(async (req) => {
  // Log de inicialização da função
  console.log(`[REQUEST] ${req.method} ${req.url}`);

  // Responde a requisições OPTIONS (CORS)
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 204,
      headers: corsHeaders
    });
  }

  try {
    // Verificar método
    if (req.method !== "POST") {
      return new Response(
        JSON.stringify({ error: "Método não permitido" }),
        {
          status: 405,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    // Obter assinatura e corpo
    const signature = req.headers.get("stripe-signature");
    const reqBody = await req.text();

    // Construir evento Stripe
    let event;
    try {
      const endpointSecret = Deno.env.get("STRIPE_WEBHOOK_SECRET") || "";
      if (endpointSecret && signature) {
        event = stripe.webhooks.constructEvent(reqBody, signature, endpointSecret);
      } else {
        console.warn("[WARN] Webhook sem verificação de assinatura");
        event = JSON.parse(reqBody);
      }
    } catch (err) {
      console.error(`[ERROR] Webhook error: ${err.message}`);
      return new Response(
        JSON.stringify({ error: err.message }),
        {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    console.log(`[INFO] Evento recebido: ${event.type}`);

    // Processar o evento
    if (event.type === 'checkout.session.completed') {
      const session = event.data.object;
      console.log(`[INFO] Processando checkout.session.completed: ${session.id}`);
      
      try {
        // Obter dados do cliente
        const customer = await stripe.customers.retrieve(session.customer);
        console.log(`[INFO] Cliente recuperado: ${customer.email}`);
        
        // Verificar se o usuário já existe
        const { data: existingUsers } = await supabase.auth.admin.listUsers();
        const userExists = existingUsers.users.some(user => 
          user.email === customer.email
        );
        
        if (!userExists) {
          // Gerar senha - SEMPRE 123456
          const tempPassword = generateRandomPassword();
          console.log(`[INFO] Senha gerada para ${customer.email}: ${tempPassword}`);
          
          // Criar usuário
          const { data: authData, error: authError } = await supabase.auth.admin.createUser({
            email: customer.email,
            email_confirm: true,
            password: tempPassword,
            user_metadata: {
              stripe_customer_id: customer.id,
              payment_status: session.payment_status
            }
          });
          
          if (authError) {
            console.error(`[ERROR] Erro ao criar usuário: ${authError.message}`);
          } else {
            console.log(`[SUCCESS] Usuário criado com sucesso: ${authData.user.id}`);
            
            // Armazenar credenciais
            const { error: credentialError } = await supabase
              .from('payment_credentials')
              .upsert({
                payment_id: session.id,
                email: customer.email,
                password: tempPassword,
                created_at: new Date().toISOString()
              });
              
            if (credentialError) {
              console.error(`[ERROR] Erro ao salvar credenciais: ${credentialError.message}`);
            } else {
              console.log(`[SUCCESS] Credenciais salvas com sucesso`);
            }
          }
        } else {
          console.log(`[INFO] Usuário já existe: ${customer.email}`);
        }
      } catch (error) {
        console.error(`[ERROR] Erro ao processar checkout: ${error.message}`);
      }
    }
    
    // Resposta padrão
    return new Response(
      JSON.stringify({ received: true }),
      {
        status: 200,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
    
  } catch (error) {
    console.error(`[ERROR] Erro geral: ${error.message}`);
    
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500, 
        headers: { ...corsHeaders, "Content-Type": "application/json" } 
      }
    );
  }
}); 